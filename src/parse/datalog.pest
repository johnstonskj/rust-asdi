// ------------------------------------------------------------------------------------------------
// Top-Level definitions
// ------------------------------------------------------------------------------------------------

program = {
    SOI ~ ( statement | query )* ~ EOI
}

// ------------------------------------------------------------------------------------------------
// Intermediate definitions
// ------------------------------------------------------------------------------------------------

statement = {
    ( rule | fact | pragma ) ~ DOT
}

/* a fact is the same structure as an atom without assumptions, and therefore without variables */
fact = {
    predicate ~ (LEFT_PAREN ~ constant_list ~ RIGHT_PAREN)?
}

rule = {
    atom ~ ( rule_separator ~ literal_list )?
}

pragma = {
    AT_SIGN ~ identifier ~ ( LEFT_PAREN ~ constant_list? ~ RIGHT_PAREN )?
}

query = {
    ( query_prefix ~ atom ~ DOT )
    | ( atom ~ QMARK )
}

atom = {
    predicate ~ ( LEFT_PAREN ~ term_list ~ RIGHT_PAREN )
}

literal = {
    negation? ~ ( atom | expression )
}

literal_list = _{
    literal ~ ( conjunction ~ literal )*
}

expression = {
    term ~ ( operator ~ term )?
}

term = {
    variable | constant
}

term_list = _{
    term ~ ( COMMA ~ term )*
}

predicate = {
    relation | string
}

constant = {
    identifier | string | number | boolean
}

constant_list = _{
    constant ~ ( COMMA ~ constant)*
}

identifier = @{
    LOWERCASE_LETTER ~ ( CASED_LETTER | DECIMAL_NUMBER | UNDERSCORE )*
}

variable = @{
    ( UPPERCASE_LETTER | UNDERSCORE ) ~ ( CASED_LETTER | DECIMAL_NUMBER | UNDERSCORE )*
}

relation = @{
    ( LETTER | UNDERSCORE ) ~ ( CASED_LETTER | DECIMAL_NUMBER | UNDERSCORE )*
}

// ------------------------------------------------------------------------------------------------
// Constant definitions
// ------------------------------------------------------------------------------------------------

string = ${
    QUOTE ~ string_inner ~ QUOTE
}

string_inner = @{
    string_char*
}

string_char = {
    !( "\"" | "\\" ) ~ ANY
    | "\\" ~ ( "\"" | "\\" | "t" )
    | "\\" ~ ( "u" ~ LEFT_BRACE ~ ASCII_HEX_DIGIT{2,6} ~ RIGHT_BRACE )
}

number = @{
    ( "+" | "-" )? ~ ASCII_DIGIT+ ~ ( DOT ~ ASCII_DIGIT+ )?
}

boolean = @{
    AT_SIGN ~ ( "true" | "false" )
}

// ------------------------------------------------------------------------------------------------
// Terminal definitions
// ------------------------------------------------------------------------------------------------

rule_separator = _{
    ":-" | "<-" | UC_LEFT_ARROW_FW
}

negation = {
    EXCLAMATION | UC_LOGICAL_NOT_FW | "NOT"
}

conjunction = _{
    COMMA | UC_LOGICAL_AND | AMPERSAND | "AND"
}

disjunction = _{
    UC_LOGICAL_OR | VERTICAL_BAR | "OR"
}

query_prefix = _{
    "?-"
}

operator = {
    LESS_THAN | less_or_equal | GREATER_THAN | greater_or_equal | EQUALS | not_equal
}

less_or_equal = _{
    "<=" | UC_LTE
}

greater_or_equal = _{
    ">=" | UC_GTE
}

not_equal = _{
    "!=" | "/=" | UC_NOT_EQUAL
}

UC_LOGICAL_AND = _{ "⋀" }

UC_LOGICAL_OR = _{ "⋁" }

UC_LOGICAL_NOT_FW = _{ "￢" }

UC_LEFT_ARROW_FW = _{ "⟵" }

UC_LTE = _{ "≤" }

UC_GTE = _{ "≥" }

UC_NOT_EQUAL = _{ "≠" }

LEFT_PAREN = _{ "(" }

RIGHT_PAREN = _{ ")" }

LEFT_BRACE = _{ "{" }

RIGHT_BRACE = _{ "}" }

LESS_THAN = _{
    "<"
}

GREATER_THAN = _{ ">" }

EQUALS = _{ "=" }

QUOTE = _{ "\"" }

HYPHEN_MINUS = _{ "-" }

UNDERSCORE = _{ "_" }

AMPERSAND = _{ "&" }

VERTICAL_BAR = _{ "|" }

EXCLAMATION = _{ "!" }

DOT = _{ "." }

COMMA = _{ "," }

QMARK = _{ "?" }

AT_SIGN = _{ "@" }

// ------------------------------------------------------------------------------------------------
// Built-in rules
// ------------------------------------------------------------------------------------------------

COMMENT = _{ "#" ~ ( !NEWLINE ~ ANY )* }

WHITESPACE = _{ " " | "\t" | NEWLINE }