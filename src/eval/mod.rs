/*!
One-line description.

More detailed description, with

# Example

*/

use crate::error::Result;
use crate::{Fact, Program, Query, Term};
use std::collections::HashSet;
use std::fmt::Debug;

// ------------------------------------------------------------------------------------------------
// Public Types & Constants
// ------------------------------------------------------------------------------------------------

pub trait Evaluator {
    fn inference(&self, from_program: &Program) -> Result<HashSet<Fact>>;
}

pub trait QueryEvaluator {
    fn evaluate(&self, query: &Query, in_program: &Program) -> Result<Results> {
        self.evaluate_with_facts(query, in_program, Default::default())
    }

    fn evaluate_with_facts(
        &self,
        _query: &Query,
        _in_program: &Program,
        _and_facts: HashSet<Fact>,
    ) -> Result<Results>;
}

#[derive(Debug)]
pub enum Results {
    None,
    Singular(Term),
    Tabular(Vec<Vec<Term>>),
}

// ------------------------------------------------------------------------------------------------
// Private Types & Constants
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Macros
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------

pub mod naive;
